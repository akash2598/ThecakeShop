{"ast":null,"code":"//this is simple to define syntax but we need it nit and clean use arrow function\n\n/*\nexport function FirstMiddleware(store) {\n    return function (next) {\n        return function (action) {\n            console.log(\"This is middlewares\")\n            console.log(\"action\", action, \"store\",store.getState())\n            var result = next(action)\n            console.log(\".....\",store.getState())\n            \n        }\n        \n    }\n    \n} */\n\n/*\n   let squre=function (num){\n       return num*num\n   }\n   let squre =()=>{\n       return num*num\n   }\n   same as\n   let square=num=>num*nums\n\n*/\nlet logger = store => next => action => {\n  console.log(\"This is middlewares\");\n  console.log(\"action\", action, \"store\", store.getState());\n  var result = next(action);\n  console.log(\".....\", store.getState());\n};","map":{"version":3,"sources":["/Users/webwerks1/Documents/Project/React Js Training/demo_react/src/reduxstore/middlewares.js"],"names":["logger","store","next","action","console","log","getState","result"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAIA,MAAM,GAACC,KAAK,IAAEC,IAAI,IAAEC,MAAM,IAAE;AAC5BC,EAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,MAAtB,EAA8B,OAA9B,EAAsCF,KAAK,CAACK,QAAN,EAAtC;AACA,MAAIC,MAAM,GAAGL,IAAI,CAACC,MAAD,CAAjB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAoBJ,KAAK,CAACK,QAAN,EAApB;AACH,CALD","sourcesContent":["//this is simple to define syntax but we need it nit and clean use arrow function\n\n/*\nexport function FirstMiddleware(store) {\n    return function (next) {\n        return function (action) {\n            console.log(\"This is middlewares\")\n            console.log(\"action\", action, \"store\",store.getState())\n            var result = next(action)\n            console.log(\".....\",store.getState())\n            \n        }\n        \n    }\n    \n} */\n\n/*\n   let squre=function (num){\n       return num*num\n   }\n   let squre =()=>{\n       return num*num\n   }\n   same as\n   let square=num=>num*nums\n\n*/\n\nlet logger=store=>next=>action=>{\n    console.log(\"This is middlewares\")\n    console.log(\"action\", action, \"store\",store.getState())\n    var result = next(action)\n    console.log(\".....\",store.getState())\n}"]},"metadata":{},"sourceType":"module"}