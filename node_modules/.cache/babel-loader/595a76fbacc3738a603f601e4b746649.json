{"ast":null,"code":"import axios from \"axios\";\nimport { call, put, takeEvery } from \"redux-saga/effects\";\n\nfunction login(action) {\n  return axios({\n    method: \"post\",\n    url: \"https://apibyashu.herokuapp.com/api/login\",\n    data: action.payload\n  });\n}\n\nexport function* RootSaga() {\n  yield takeEvery('LOGIN', LoginGenerator);\n}\n_c = RootSaga;\n\nfunction* LoginGenerator() {\n  var result = yield call(login, action);\n\n  if (result.data.token) {\n    yield put({\n      type: 'Login_Success',\n      payload: result.data\n    });\n  } else {\n    yield put({\n      type: 'Login_Fail' // payload:result.data\n\n    });\n  }\n}\n\n_c2 = LoginGenerator;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"RootSaga\");\n$RefreshReg$(_c2, \"LoginGenerator\");","map":{"version":3,"sources":["/Users/webwerks1/Documents/Project/React Js Training/demo_react/src/reduxstore/Sagas.js"],"names":["axios","call","put","takeEvery","login","action","method","url","data","payload","RootSaga","LoginGenerator","result","token","type"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAcC,GAAd,EAAkBC,SAAlB,QAAmC,oBAAnC;;AAKA,SAASC,KAAT,CAAeC,MAAf,EAAsB;AAClB,SAAOL,KAAK,CAAC;AACTM,IAAAA,MAAM,EAAC,MADE;AAETC,IAAAA,GAAG,EAAC,2CAFK;AAGTC,IAAAA,IAAI,EAACH,MAAM,CAACI;AAHH,GAAD,CAAZ;AAKH;;AAED,OAAO,UAAUC,QAAV,GAAqB;AAC3B,QAAMP,SAAS,CAAC,OAAD,EAASQ,cAAT,CAAf;AACA;KAFgBD,Q;;AAIjB,UAAUC,cAAV,GAA0B;AACtB,MAAIC,MAAM,GAAC,MAAMX,IAAI,CAACG,KAAD,EAAOC,MAAP,CAArB;;AAEA,MAAGO,MAAM,CAACJ,IAAP,CAAYK,KAAf,EAAqB;AACjB,UAAMX,GAAG,CAAC;AACNY,MAAAA,IAAI,EAAC,eADC;AAENL,MAAAA,OAAO,EAACG,MAAM,CAACJ;AAFT,KAAD,CAAT;AAKH,GAND,MAOI;AACA,UAAMN,GAAG,CAAC;AACNY,MAAAA,IAAI,EAAC,YADC,CAEP;;AAFO,KAAD,CAAT;AAIH;AAEJ;;MAjBSH,c","sourcesContent":["import axios from \"axios\"\nimport { call,put,takeEvery } from \"redux-saga/effects\"\n\n\n\n\nfunction login(action){\n    return axios({\n        method:\"post\",\n        url:\"https://apibyashu.herokuapp.com/api/login\",\n        data:action.payload\n    })\n}\n\nexport function* RootSaga (){\n yield takeEvery('LOGIN',LoginGenerator)\n}\n\nfunction* LoginGenerator(){\n    var result=yield call(login,action)\n\n    if(result.data.token){\n        yield put({\n            type:'Login_Success',\n            payload:result.data\n        })\n\n    }\n    else{\n        yield put({\n            type:'Login_Fail'\n           // payload:result.data\n        })\n    }\n    \n}"]},"metadata":{},"sourceType":"module"}